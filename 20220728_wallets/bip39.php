<?php
// array[0..2047]
$words = explode("\n", file_get_contents('wordlist_en.txt'));

// Sources:
// https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
// https://iancoleman.io/bip39/

// Generate 128 bits of entropy
$f = fopen('/dev/random', 'r');
$ent = fread($f, 16); // 16 octets = 128 bits
fclose($f);

$strShaOfEnt = hash("sha256", $ent);
$binShaOfEnt = hex2bin($strShaOfEnt);
echo "sha256 of ENT = " . $strShaOfEnt . "\n";

// "First, an initial entropy of ENT bits is generated. 
// A checksum is generated by taking the first ENT / 32 bits (128/32 = 4) of its SHA256 hash."
// => We just need to take the first hex digit as one hex digit = 4 bits
$strChecksum = substr($strShaOfEnt, 0, 1);
$strEntWithChecksum = bin2hex($ent) . $strChecksum;

echo "Entropy with checksum = $strEntWithChecksum\n";

// Because we have a odd number of bytes, native functions like 
// chunk_split, array_slice, ... won't work.
// Let's do it the old style with zeros and ones as strings.
$strbinEntWithChecksum = str_replace(
	['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'], 
	['0000','0001','0010','0011','0100','0101','0110','0111','1000','1001','1010','1011','1100','1101','1110','1111'],
	$strEntWithChecksum
);
$splited = explode("\n", chunk_split($strbinEntWithChecksum, 11));

foreach($splited as $k => $split) {
	if (!empty($split)) {
		// Print every word one by one
		echo $words[bindec($split)] . " ";
	}
}
echo "\n";
